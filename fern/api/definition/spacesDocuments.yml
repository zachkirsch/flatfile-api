# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: false
  base-path: /spaces
  endpoints:
    getAllSpaceConfigs:
      path: /configs
      method: GET
      docs: Returns all space configs for an account
      display-name: List space configs
      request:
        name: GetAllSpaceConfigsRequest
        query-parameters:
          environmentId: optional<string>
      response: SpacePatterns

    replaceSpaceConfig:
      path: /configs
      method: PUT
      docs: >-
        Replaces an existing Space Config and optionally migrates all spaces
        using the config
      display-name: Replace a space config
      request:
        name: ReplaceSpaceConfigRequest
        query-parameters:
          migrate: optional<boolean>
        body: commons.SpacePatternConfig

    addSpaceConfig:
      path: /configs
      method: POST
      docs: Creates a new Space Config
      display-name: Create a space config
      request:
        name: AddSpaceConfigRequest
        body: commons.SpacePattern

    getAllSpaces:
      path: ""
      method: GET
      docs: Returns all spaces for an account or environment
      display-name: List spaces
      request:
        name: GetAllSpacesRequest
        query-parameters:
          environmentId: optional<string>
          pageSize:
            docs: Number of spaces to return in a page (default 10)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
          search: optional<string>
          sortField: optional<GetSpacesSortField>
          sortDirection: optional<commons.SortDirection>
      response: Spaces

    addSpace:
      path: ""
      method: POST
      docs: Creates a new space based on an existing Space Config
      display-name: Create a space
      request:
        body: SpaceRequest
      response: commons.Space

    getSpaceById:
      path: /{spaceId}
      method: GET
      docs: Returns a single space
      display-name: Get a space
      path-parameters:
        spaceId:
          docs: ID of space to return
          type: string
      response: commons.Space

    deleteSpaceById:
      path: /{spaceId}
      method: DELETE
      docs: Delete a space
      display-name: Delete a space
      path-parameters:
        spaceId:
          docs: ID of space to delete
          type: string
      response: commons.Success

    updateSpaceById:
      path: /{spaceId}
      method: PATCH
      docs: Update a space, to change the name for example
      display-name: Update a space
      path-parameters:
        spaceId:
          docs: ID of space to update
          type: string
      request:
        name: UpdateSpaceRequest
        body: SpaceRequest
      response: commons.Space

    getSpaceDocuments:
      path: /{spaceId}/documents
      method: GET
      docs: Returns all documents for a space
      display-name: List documents
      path-parameters:
        spaceId:
          docs: ID of space to return
          type: string
      response: Documents

    addDocumentToSpace:
      path: /{spaceId}/documents
      method: POST
      docs: Add a new document to the space
      display-name: Create a document
      path-parameters:
        spaceId:
          docs: ID of space to add the document on
          type: string
      request:
        body: DocumentRequest
      response: DocumentResponse

    getSpaceDocumentById:
      path: /{spaceId}/documents/{documentId}
      method: GET
      docs: Returns a single document
      display-name: Get a document
      path-parameters:
        spaceId:
          docs: ID of space to return
          type: string
        documentId:
          docs: ID of document to return
          type: string
      response: Document

    updateDocument:
      path: /{spaceId}/documents/{documentId}
      method: PATCH
      docs: updates a single document, for only the body and title
      display-name: Update a document
      path-parameters:
        spaceId:
          docs: ID of space to return
          type: string
        documentId:
          docs: ID of document to return
          type: string
      request:
        body: DocumentRequest
      response: DocumentResponse

    getEventToken:
      path: /{spaceId}/subscription
      method: GET
      docs: Get a token which can be used to subscribe to events for this space
      display-name: Get subscription credentials
      path-parameters:
        spaceId:
          docs: ID of space to return
          type: string
      response: EventToken

types:
  SpacePatterns:
    properties:
      data: optional<list<commons.SpacePattern>>

  Spaces:
    properties:
      pagination: optional<commons.Pagination>
      data: optional<list<commons.Space>>

  Documents:
    properties:
      data: optional<list<DocumentResponse>>

  DocumentResponse: 
    properties:
      data: Document

  Document: 
    docs: A document (markdown components) belong to a space
    extends: DocumentConfig 
    properties:
      id: commons.DocumentId 
      spaceId: commons.SpaceId 

  EventToken:
    docs: Properties used to allow users to connect to the event bus
    properties:
      accountId: optional<commons.AccountId>
      subscribeKey:
        docs: The id of the event bus to subscribe to
        type: optional<string>
      ttl:
        docs: Time to live in minutes
        type: optional<double>
      token: optional<string>

  GetSpacesSortField:
    enum:
      - name
      - workbooksCount
      - filesCount
      - environmentId
      - createdByUserName

  DocumentRequest:
    properties:
      title: string
      body: string

  SpaceRequest: 
    docs: Request body object used to create a space
    properties:
      spaceConfigId: commons.SpaceConfigId 
      environmentId: commons.EnvironmentId 
      primaryWorkbookId: commons.WorkbookId

  DocumentConfig:
    docs: Properties used to create a new document
    properties:
      title: string
      body: string