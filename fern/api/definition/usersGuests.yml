# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

service:
  auth: false
  base-path: ""
  endpoints:
    getAll:
      path: /users
      method: GET
      docs: Gets a list of users
      display-name: List users
      response: Users

    create:
      path: /users
      method: POST
      docs: A user is a privileged user that logs in with a username and password.
      display-name: Create a user
      request:
        name: CreateUserRequest
        body: UserRequest
      response: commons.User

    get:
      path: /users/{userId}
      method: GET
      docs: Gets a user
      display-name: Get a user
      path-parameters:
        userId:
          docs: The user id
          type: string
      response: commons.User

    getApiTokens:
      path: /users/{userId}/api-token
      method: GET
      docs: Gets all the api tokens for a user.
      display-name: List all tokens
      path-parameters:
        userId: string
      request:
        name: GetApiTokensRequest
        query-parameters:
          tenantId: string
          pageSize:
            docs: Number of tokens to return in a page (default 10)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
      response: ApiTokens

    createApiToken:
      path: /users/{userId}/api-token
      method: POST
      docs: Creates an api token for authenticating against Flatfile APIs.
      display-name: Create an API token
      path-parameters:
        userId: string
      request:
        name: CreateApiTokenRequest
        query-parameters:
          tenantId: string

    getGuests:
      path: /guests
      method: GET
      docs: Returns all guests
      display-name: List guests
      request:
        name: GetGuestsRequest
        query-parameters:
          spaceId:
            docs: ID of space to return
            type: commons.SpaceId 
      response: Guests

    addGuestToSpace:
      path: /guests
      method: POST
      docs: >-
        Guests are only there to upload, edit, and download files and perform
        their tasks in a specific Space.
      display-name: Create a guest
      request:
        name: AddGuestToSpaceRequest
        body: Guest
      response: Guests

    getSpaceGuestById:
      path: /guests/{guestId}
      method: GET
      docs: Returns a single guest
      display-name: Get a guest
      path-parameters:
        guestId:
          docs: ID of guest to return
          type: string
      response: Guest

    deleteGuest:
      path: /guests/{guestId}
      method: DELETE
      docs: Deletes a single guest
      display-name: Delete a guest
      path-parameters:
        guestId:
          docs: ID of guest to return
          type: string
      response: commons.Success

    updateGuest:
      path: /guests/{guestId}
      method: PATCH
      docs: Updates a single guest, for example to change name or email
      display-name: Update a guest
      path-parameters:
        guestId:
          docs: ID of guest to return
          type: string
      request:
        name: UpdateGuestRequest
        body: Guest          
      response: Guest

    inviteGuests:
      path: /invitations
      method: POST
      docs: >-
        Guests can be created as a named guest on the Space or thereâ€™s a global
        link that will let anonymous guests into the space.
      display-name: Invite guests
      request: InviteGuestsRequest
      response: commons.Success

    exchangeInvitation:
      path: /invitations/exchange
      method: POST
      docs: Exchange an invitation for an access token
      display-name: Exchange an invitation for an access token
      request: ExchangeRequest
      response: Exchange

types:
  Users:
    properties:
      data: optional<list<commons.User>>

  Exchange:
    properties:
      data: optional<_InlinedType0>

  _InlinedType0:
    properties:
      valid:
        docs: Whether the provided token was valid
        type: boolean
      token:
        docs: The refreshed token, if the provided token was valid
        type: optional<string>
      sentTo:
        docs: >-
          The email address the recovery email was sent to, if the provided
          token was not valid
        type: optional<string>

  UserRequest:
    docs: Configurations for the user
    properties:
      email: string 
      type: string 
      accountId: commons.AccountId 
  
  Guest: 
    docs: Configurations for the guests
    properties:
      environmentId: commons.EnvironmentId
      email: string 
      name: string 
      spaces: list<commons.SpaceId>
  
  Guests: list<Guest>

  ApiTokens: 
    docs: List of api tokens without secrets
    properties:
      pagination: optional<commons.Pagination>
      data: list<commons.ApiToken>

  InviteGuestsRequest: list<Invite>

  Invite: 
    properties:
      guestId: commons.GuestId 
      spaceId: commons.SpaceId 
      message: 
        type: string
        docs:  Message to send with the invite

  ExchangeRequest: 
    properties:
      token: 
        type: string 
        docs: The token to use for the request
      