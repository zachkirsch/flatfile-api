# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

types:
  AccessToken:
    docs: Properties used to allow users to request our private services
    properties:
      accessToken: string
      expiresIn: string
      expires: string

  User:
    docs: Configurations for the user
    extends: UserConfig
    properties:
      id: UserId

  UserId:
    docs: User ID
    type: string

  UserConfig:
    docs: Properties used to create a new user
    properties:
      email: string
      name: string
      accountId: AccountId

  AccountId:
    docs: Account ID
    type: string

  Pagination:
    docs: pagination info
    properties:
      currentPage:
        docs: current page of results
        type: double
      pageCount:
        docs: total number of pages of results
        type: double
      totalCount:
        docs: total available results
        type: double

  ApiToken:
    docs: Client id and secret used for authenticating against our APIs
    properties:
      clientId: string
      description: string
      metadata: map<string, unknown>
      createdAt: string
      secret: optional<string>

  GuestId:
    docs: Guest ID
    type: string

  EnvironmentId:
    docs: Environment ID
    type: string

  Success:
    docs: Informs whether or not a request was successful
    properties:
      success: boolean

  File:
    properties:
      data: FileData

  FileData:
    docs: Any uploaded file of any type
    properties:
      id: FileId
      name:
        docs: Original filename
        type: string
      ext:
        docs: Extension of the file
        type: string
      mimetype:
        docs: MIME Type of the file
        type: string
      encoding:
        docs: Text encoding of the file
        type: string
      status:
        docs: Status of the file
        type: ModelFileStatusEnum
      size:
        docs: Size of file in bytes
        type: integer
      bytesReceived:
        docs: Number of bytes that have been uploaded so far (useful for progress tracking)
        type: integer
      spaceId: SpaceId
      workbookId: WorkbookId
      createdAt:
        docs: Date the file was created
        type: string
      updatedAt:
        docs: Date the file was last updated
        type: string

  FileId:
    docs: File ID
    type: string

  ModelFileStatusEnum:
    enum:
      - partial
      - complete
      - archived
      - purged

  SpaceId:
    docs: Space ID
    type: string

  WorkbookId:
    docs: Workbook ID
    type: string

  Environment:
    properties:
      data: optional<EnvironmentConfig>

  EnvironmentConfig:
    docs: Properties used to create a new environment
    properties:
      name:
        docs: The name of the environment
        type: string
      isProd:
        docs: Whether or not the environment is a production environment
        type: boolean
      newSpacesInherit:
        docs: >-
          Whether or not new spaces have the option to copy files and guests
          from existing spaces, defaults to false
        type: optional<boolean>
      guestAuthentication: optional<list<GuestAuthentication>>

  GuestAuthentication:
    docs: The type of authentication to use for guests
    enum:
      - shared_link
      - magic_link

  AgentLogs:
    properties:
      pagination: optional<Pagination>
      data: optional<list<AgentLog>>

  AgentLog:
    docs: A log of an agent execution
    properties:
      eventId: EventId
      success:
        docs: Whether the agent execution was successful
        type: boolean
      createdAt: string
      log:
        docs: The log of the agent execution
        type: optional<string>

  EventId:
    docs: Event ID
    type: string

  Agent:
    properties:
      data: optional<AgentConfig>

  AgentId:
    docs: Agent ID
    type: string

  AgentConfig:
    docs: Properties used to create a new agent
    properties:
      topics:
        docs: The topics the agent should listen for
        type: optional<list<EventTopic>>
      compiler:
        docs: The compiler of the agent
        type: optional<Compiler>
      source:
        docs: The source of the agent
        type: optional<string>

  Compiler:
    docs: The compiler of the agent
    enum:
      - js

  EventTopic:
    docs: The topic of the event
    enum:
      - value: space:added
        name: space_added
      - value: space:removed
        name: space_removed
      - value: workbook:added
        name: workbook_added
      - value: workbook:removed
        name: workbook_removed
      - value: user:added
        name: user_added
      - value: user:removed
        name: user_removed
      - value: user:online
        name: user_online
      - value: user:offline
        name: user_offline
      - value: upload:started
        name: upload_started
      - value: upload:failed
        name: upload_failed
      - value: upload:completed
        name: upload_completed
      - value: job:started
        name: job_started
      - value: job:waiting
        name: job_waiting
      - value: job:updated
        name: job_updated
      - value: job:failed
        name: job_failed
      - value: job:completed
        name: job_completed
      - value: job:deleted
        name: job_deleted
      - value: records:created
        name: records_created
      - value: records:updated
        name: records_updated
      - value: records:deleted
        name: records_deleted
      - value: sheet:validated
        name: sheet_validated
      - value: action:triggered
        name: action_triggered
      - value: file:deleted
        name: file_deleted

  Event:
    properties:
      data: optional<EventConfig>

  EventConfig:
    docs: Properties used to create a new event
    properties:
      domain:
        docs: The domain of the event
        type: Domain
      topic: EventTopic
      context:
        docs: The context of the event
        type: Context
      attributes:
        docs: The attributes of the event
        type: optional<Attributes>
      payload:
        docs: Payload of the event
        type: map<string, unknown>
      callbackUrl:
        docs: The callback url to acknowledge the event
        type: optional<string>
      dataUrl:
        docs: The url to retrieve the data associated with the event
        type: optional<string>
      createdAt:
        docs: Date the event was created
        type: optional<string>
      acknowledgedAt:
        docs: Date the event was acknowledged
        type: optional<string>
      acknowledgedBy:
        docs: The actor (user or system) who acknowledged the event
        type: optional<string>

  Domain:
    docs: The domain of the event
    enum:
      - file
      - space
      - workbook
      - job

  Context:
    docs: The context of the event
    properties:
      actionName: optional<ActionName>
      accountId: AccountId
      environmentId: EnvironmentId
      spaceId: optional<SpaceId>
      workbookId: optional<WorkbookId>
      sheetId: optional<SheetId>
      sheetSlug: optional<SheetSlug>
      versionId: optional<VersionId>
      jobId: optional<JobId>
      fileId: optional<FileId>
      precedingEventId: optional<EventId>

  Progress:
    docs: The progress of the event within a collection of iterable events
    properties:
      current:
        docs: The current progress of the event
        type: optional<integer>
      total:
        docs: The total number of events in this group
        type: optional<integer>
      percent:
        docs: The percent complete of the event group
        type: optional<integer>

  Attributes:
    docs: The attributes of the event
    properties:
      progress:
        docs: The progress of the event within a collection of iterable events
        type: optional<Progress>

  ActionName:
    docs: Name of an action
    type: string

  SheetId:
    docs: Sheet ID
    type: string

  SheetSlug:
    docs: Sheet Slug
    type: string

  VersionId:
    docs: Version ID
    type: string

  JobId:
    docs: Pipeline Job ID
    type: string

  Job:
    properties:
      data: optional<Job>

  JobConfig:
    docs: A single unit of work that a pipeline will execute
    properties:
      type:
        docs: The type of job
        type: JobType
      operation:
        docs: the type of operation to perform on the data
        type: optional<Operation>
      source: FileOrWorkbookId
      destination: optional<WorkbookId>
      trigger:
        docs: the type of trigger to use for this job
        type: optional<Trigger>
      status:
        docs: the status of the job
        type: optional<JobStatus>
      progress:
        docs: the progress of the job
        type: optional<double>

  JobType:
    docs: The type of job
    enum:
      - file
      - workbook

  Operation:
    docs: the type of operation to perform on the data
    enum:
      - extract
      - map
      - value: delete-records
        name: delete_records

  Trigger:
    docs: the type of trigger to use for this job
    enum:
      - manual
      - immediate

  JobStatus:
    docs: the status of the job
    enum:
      - planning
      - ready
      - executing
      - complete
      - failed

  FileOrWorkbookId:
    docs: The id of a file or workbook
    type: string

  DeleteJobConfig:
    docs: The configuration for a delete job
    properties:
      filter: Filter
      filterField:
        docs: Name of field by which to filter records
        type: optional<string>
      sheet: SheetId
      exceptions: optional<list<RecordId>>

  Filter:
    enum:
      - valid
      - error
      - all
      - none

  RecordId:
    docs: Record ID
    type: string

  FileJobConfig:
    properties:
      driver:
        docs: The driver to use for extracting data from the file
        type: Driver

  Driver:
    docs: The driver to use for extracting data from the file
    enum:
      - csv

  PipelineJobConfig:
    properties:
      sourceSheetId: SheetId
      destinationSheetId: SheetId

  JobPlan:
    docs: The job/plan tuple that contains the full plan and the jobs status
    properties:
      job: optional<Job>
      plan: optional<Plan>

  Plan:
    docs: >-
      The execution plan for a job, for example, for a map job, the execution
      plan is the mapping of the source sheet to the destination sheet.
    properties:
      fieldMapping:
        type: optional<list<FieldMapping>>
        docs: Edges
      unmappedSourceFields: optional<list<SourceField>>
      unmappedDestinationFields: optional<list<DestinationField>>
      headerRowCount:
        docs: The number of rows to skip before reading data from the document
        type: optional<integer>

  CategoryMapping:
    properties:
      sourceValue: optional<string>
      destinationValue: optional<string>

  EnumDetails:
    docs: >-
      Only available if one or more of the destination fields is of type enum.
      Provides category mapping.
    properties:
      mapping: optional<list<CategoryMapping>>
      unusedSourceValues: optional<list<string>>
      unusedDestinationValues: optional<list<string>>

  Certainty:
    enum:
      - absolute
      - strong
      - moderate
      - weak

  Metadata:
    properties:
      certainty: optional<Certainty>
      source: optional<string>

  FieldMapping:
    docs: Edge
    properties:
      sourceField: Property
      destinationField: Property
      preview: optional<list<string>>
      enumDetails:
        docs: >-
          Only available if one or more of the destination fields is of type
          enum. Provides category mapping.
        type: optional<EnumDetails>
      metadata: optional<Metadata>

  SourceField:
    properties:
      sourceField: Property
      preview: optional<list<string>>

  DestinationField:
    properties:
      enumDetails:
        docs: >-
          Only available if one or more of the destination fields is of type
          enum. Provides category mapping.
        type: optional<EnumDetails>
      destinationField: Property
      preview: optional<list<string>>

  NumberProperty:
    extends:
      - BaseProperty
      - ArrayableProperty
    properties:
      config:
        docs: Optional configuration
        type: optional<NumberConfig>

  NumberConfig:
    docs: Optional configuration
    properties:
      decimal_places:
        docs: Number of decimal places to round data to
        type: integer

  ArrayableProperty:
    properties:
      is_array:
        docs: Will allow multiple values and store as an array
        type: optional<boolean>

  BooleanProperty:
    extends: BaseProperty
    properties:
      config: optional<BooleanPropertyConfig>

  BooleanPropertyConfig:
    properties:
      allow_indeterminate:
        type: boolean
        docs: Allow a neither true or false state to be stored as `null`

  DateProperty:
    extends:
      - BaseProperty

  StringProperty:
    extends:
      - BaseProperty

  EnumProperty:
    extends:
      - BaseProperty
      - ArrayableProperty
    properties:
      config: EnumPropertyConfig

  EnumPropertyConfig:
    properties:
      allow_custom:
        type: boolean
        docs: Permit the user to create new options for this specific field.
      options: list<EnumPropertyOption>

  EnumPropertyOption:
    properties:
      label:
        docs: A visual label for this option, defaults to value if not provided
        type: optional<string>
      color:
        docs: An optional color to assign this option
        type: optional<string>
      icon:
        docs: A reference pointer to a previously registered icon
        type: optional<string>
      meta:
        docs: >-
          An arbitrary JSON object to be associated with this option and made
          available to hooks
        type: optional<map<string, unknown>>

  ReferenceProperty:
    extends:
      - BaseProperty
      - ArrayableProperty
    properties:
      config: ReferencePropertyConfig

  ReferencePropertyConfig:
    properties:
      ref:
        type: string
        docs: Full path reference to a sheet configuration. Must be in the same workbook.
      key:
        type: string
        docs: Key of the property to use as the reference key. Defaults to `id`
      relationship:
        type: ReferencePropertyRelationship
        docs: The type of relationship this defines

  ReferencePropertyRelationship:
    enum:
      - value: has-one
        name: has_one
      - value: has-many
        name: has_many

  BaseProperty:
    properties:
      key: string
      label:
        type: optional<string>
        docs: User friendly field name
      description: optional<string>
      constraints: list<Constraint>

  Property:
    union:
      string: StringProperty
      number: NumberProperty
      boolean: BooleanProperty
      date: DateProperty
      enum: EnumProperty
      reference: ReferenceProperty

  Constraint:
    union:
      required: {}
      unique: UniqueConstraint
      computed: {}

  UniqueConstraint:
    properties:
      config: optional<UniqueConstraintConfig>

  UniqueConstraintConfig:
    properties:
      case_sensitive:
        type: boolean
        docs: Ignore casing when determining uniqueness
      ignore_empty:
        type: boolean
        docs: Do not flag empty values as duplicate

  SpacePattern:
    properties:
      data: optional<SpaceConfigId>

  SpaceConfigId:
    docs: Space Config ID
    type: string

  Space:
    properties:
      id: SpaceId
      lastAccessed: optional<string>

  SpacePatternConfig:
    docs: Properties used to create a new Space Config
    properties:
      slug: string
      name: string
      blueprints: list<Blueprint>
      actions: optional<list<Action>>

  Blueprint:
    docs: Properties used to create a new Blueprint
    properties:
      slug: string
      name: string
      primary: optional<boolean>
      sheets: list<SheetConfig>

  SheetConfig:
    docs: Describes shape of data as well as behavior
    properties:
      name: string
      description: optional<string>
      slug: optional<string>
      fields: list<Property>
      actions: optional<list<Action>>

  Action:
    properties:
      slug: string
      label: string
      type: optional<string>
      description: optional<string>

  SpaceData:
    properties:
      data: optional<SpaceConfig>

  SpaceConfig:
    docs: Properties used to create a new Space
    properties:
      spaceConfigId: SpaceConfigId
      environmentId: EnvironmentId
      primaryWorkbookId: optional<WorkbookId>
      name:
        docs: The name of the space
        type: optional<string>
      displayOrder:
        docs: The display order
        type: optional<integer>
      sidebarConfigs: optional<list<WorkbookSidebarConfig>>
      actions: optional<list<Action>>

  SidebarConfig: 
    union: 
      workbook: WorkbookSidebarConfig
      document: DocumentSidebarConfig
      link: LinkSidebarConfig

  WorkbookSidebarConfig: 
    properties:
      workbookId: WorkbookId 

  DocumentSidebarConfig: 
    properties:
      documentId: DocumentId 

  LinkSidebarConfig: 
    properties:
      href: 
        type: string
        docs: http url of the link
      title:
        type: string 
        docs: Space the file should be uploaded to

  DocumentId:
    docs: Document ID
    type: string

  Sheet:
    docs: A place to store tabular data
    properties:
      id: SheetId
      name: string
      config: optional<SheetConfig>

  RecordsResponse:
    properties:
      data: optional<RecordsResponseData>

  RecordsResponseData:
    docs: A list of records with optional record counts
    extends:
      - Success
    properties:
      records: optional<RecordsWithLinks>
      counts: optional<RecordCounts>
      versionId: optional<VersionId>

  RecordsWithLinks:
    docs: List of Record objects, including links to related rows
    type: list<RecordWithLinks>

  RecordWithLinks:
    docs: A single row of data in a Sheet, including links to related rows
    properties:
      id: RecordId
      workbookId: WorkbookId
      sheetId: SheetId
      values: RecordDataWithLinks

  RecordDataWithLinks:
    docs: A single row of data in a Sheet, including links to related rows
    type: map<string, CellValueWithLinks>

  CellValueWithLinks:
    extends:
      - CellValue
    properties:
      links: optional<Records>

  Records:
    docs: List of Record objects
    type: list<Record>

  Record:
    docs: A single row of data in a Sheet
    properties:
      id: RecordId
      workbookId: WorkbookId
      sheetId: SheetId
      values: RecordData

  RecordData:
    docs: A single row of data in a Sheet
    type: map<string, CellValue>

  CellValue:
    properties:
      valid: optional<boolean>
      messages: optional<list<ValidationMessage>>

  ValidationMessage:
    docs: Record data validation messages
    properties:
      type: optional<ValidationType>
      source: optional<ValidationSource>
      message: optional<string>

  ValidationType:
    enum:
      - error
      - warn
      - info

  ValidationSource:
    enum:
      - value: required-constraint
        name: required_constraint
      - value: unique-constraint
        name: unique_constraint
      - value: custom-logic
        name: custom_logic
      - unlinked
      - value: invalid-option
        name: invalid_option

  RecordCounts:
    properties:
      total: optional<double>
      valid: optional<double>
      error: optional<double>

  Fields:
    properties:
      data: optional<FieldResponse>

  FieldResponse:
    docs: A field with one or many records
    type: map<string, FieldsData>

  FieldsData:
    docs: Array of field data
    type: list<FieldData>

  FieldData:
    docs: A single field of data in a Sheet
    properties:
      id: optional<RecordId>
      counts: optional<RecordCounts>
    extends: CellValue

  SortDirection: 
    enum: 
      - asc 
      - desc

  Workbook: 
    docs: A collection of one or more sheets 
    properties:
      id: WorkbookId
      name: optional<string>
      spaceId: SpaceId 
      environmentId: optional<EnvironmentId>
    