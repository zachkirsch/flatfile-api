imports: 
  property: property.yml
  commons: commons.yml

service: 
  auth: true
  base-path: /workbooks/{workbookId}/sheets
  path-parameters:
    workbookId:
      docs: ID of workbook
      type: commons.WorkbookId
  endpoints: 
    list:
      path: ""
      method: GET
      docs: Returns sheets in a workbook
      display-name: List sheets
      path-parameters:
        workbookId:
          docs: ID of workbook
          type: string
      response: ListSheetsResponse

    get:
      path: /{sheetId}
      method: GET
      docs: Returns a sheet in a workbook
      display-name: Get a sheet
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      response: SheetResponse

    getRecords:
      path: /{sheetId}/records
      method: GET
      docs: Returns records from a sheet in a workbook
      display-name: Get records
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request:
        name: GetRecordsRequest
        query-parameters:
          versionId: optional<string>
          sortField:
            docs: Name of field by which to sort records
            type: optional<string>
          sortDirection:
            docs: Sort direction - asc (ascending) or desc (descending)
            type: optional<commons.SortDirection>
          filter:
            docs: Options to filter records
            type: optional<commons.Filter>
          filterField:
            docs: Name of field by which to filter records
            type: optional<string>
          pageSize:
            docs: >-
              Number of records to return in a page (default 1000 if pageNumber
              included)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
          includeCounts:
            docs: >-
              Include counts for the total records, valid records and records
              with errors
            type: optional<boolean>
          searchValue:
            docs: >-
              Search the entire sheet for the given value, returning matching
              rows
            type: optional<string>
      response: RecordsResponse

    updateRecords:
      path: /{sheetId}/records
      method: PUT
      docs: Updates existing records in a workbook sheet
      display-name: Update records
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request: RecordsUpdates
      response: RecordsResponse

    insertRecords:
      path: /{sheetId}/records
      method: POST
      docs: Adds records to a workbook sheet
      display-name: Insert records
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request: list<RecordData>
      response: RecordsResponse

    deleteRecords:
      path: /{sheetId}/records
      method: DELETE
      docs: Deletes records from a workbook sheet
      display-name: Delete records
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      response: commons.Success

    getRecordsAsCsv:
      path: /{sheetId}/download
      method: GET
      docs: Returns records from a sheet in a workbook as a csv file
      display-name: Download records as a CSV file
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request:
        name: GetRecordsCsvRequest
        query-parameters:
          versionId: optional<string>
          sortField:
            docs: Name of field by which to sort records
            type: optional<string>
          sortDirection:
            docs: Sort direction - asc (ascending) or desc (descending)
            type: optional<commons.SortDirection>
          filter:
            docs: Options to filter records
            type: optional<commons.Filter>
          filterField:
            docs: Name of field by which to filter records
            type: optional<string>
      response: string

    getFields:
      path: /{sheetId}/fields
      method: GET
      docs: Returns fields from a sheet in a workbook
      display-name: Get fields
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      request:
        name: GetFieldsRequest
        query-parameters:
          sortField:
            docs: Name of field by which to sort records
            type: optional<string>
          sortDirection:
            docs: Sort direction - asc (ascending) or desc (descending)
            type: optional<commons.SortDirection>
          filter:
            docs: Options to filter records
            type: optional<commons.Filter>
          filterField:
            docs: Name of field by which to filter records
            type: optional<string>
          pageSize:
            docs: >-
              Number of records to return in a page (default 1000 if pageNumber
              included)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
          distinct:
            docs: When true, excludes duplicate values
            type: optional<boolean>
      response: GetFieldsResponse

    getField:
      path: /{sheetId}/fields/{fieldId}
      method: GET
      docs: Returns a field from a sheet in a workbook
      display-name: Get a field
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
        fieldId:
          docs: ID of field
          type: commons.FieldId
      request:
        name: GetFieldRequest
        query-parameters:
          sortField:
            docs: Name of field by which to sort records
            type: optional<string>
          sortDirection:
            docs: Sort direction - asc (ascending) or desc (descending)
            type: optional<commons.SortDirection>
          filter:
            docs: Options to filter records
            type: optional<commons.Filter>
          pageSize:
            docs: >-
              Number of records to return in a page (default 1000 if pageNumber
              included)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
          distinct:
            docs: When true, excludes duplicate values
            type: optional<boolean>
      response: FieldResponse

    find:
      path: /{sheetId}/fields/{fieldId}/find/{searchValue}
      method: GET
      docs: >-
        Searches for the given value in a field and returns the records that
        match the search criteria
      display-name: Find a value in a field
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
        fieldId:
          docs: ID of field
          type: commons.FieldId
        searchValue:
          docs: The value to search for
          type: string
      request:
        name: FindRecordsRequest
        query-parameters:
          pageSize:
            docs: >-
              Number of records to return in a page (default 1000 if pageNumber
              included)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
      response: RecordsResponse

    findAndReplace:
      path: /{sheetId}/fields/{fieldId}/replace/{searchValue}
      method: PUT
      docs: >-
        Searches for the given searchValue in a field and replaces all instances
        of that value with replaceValue
      display-name: Find and replace a value in a field
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
        fieldId:
          docs: ID of field
          type: commons.FieldId
        searchValue:
          docs: The value to search for
          type: string
      request:
        name: FindAndReplaceRecordRequest
        query-parameters:
          pageSize:
            docs: >-
              Number of records to return in a page (default 1000 if pageNumber
              included)
            type: optional<integer>
          pageNumber:
            docs: Based on pageSize, which page of records to return
            type: optional<integer>
        body:
          properties:
            replace:
              type: unknown 
              docs: The value to replace found values with 
      response: RecordsResponse

    createVersion:
      path: /{sheetId}/versions
      method: POST
      docs: Creates a new version of a workbook sheet
      display-name: Create a version
      path-parameters:
        sheetId:
          docs: ID of sheet
          type: commons.SheetId
      response: CreateSheetVersionResponse

types: 
  ListSheetsResponse: 
    properties: 
      data: list<Sheet>
  
  SheetResponse:
    properties:
      data: optional<Sheet>

  Sheet:
    docs: A place to store tabular data
    properties:
      id: SheetId
      name: string
      config: optional<SheetConfig>

  SheetConfig:
    docs: Describes shape of data as well as behavior
    properties:
      name: string
      description: optional<string>
      slug: optional<string>
      fields: list<property.Property>
      actions: optional<list<commons.Action>>

  RecordsResponse:
    properties:
      data: optional<RecordsResponseData>

  RecordsResponseData:
    docs: A list of records with optional record counts
    extends:
      - Success
    properties:
      records: optional<RecordsWithLinks>
      counts: optional<RecordCounts>
      versionId: optional<commons.VersionId>
  
  RecordCounts:
    properties:
      total: optional<double>
      valid: optional<double>
      error: optional<double>

  RecordsWithLinks:
    docs: List of Record objects, including links to related rows
    type: list<RecordWithLinks>

  RecordWithLinks:
    docs: A single row of data in a Sheet, including links to related rows
    properties:
      id: commons.RecordId
      workbookId: commons.WorkbookId
      sheetId: commons.SheetId
      values: RecordDataWithLinks

  RecordDataWithLinks:
    docs: A single row of data in a Sheet, including links to related rows
    type: map<string, CellValueWithLinks>

  CellValueWithLinks:
    extends:
      - CellValue
    properties:
      links: optional<Records>

  Records:
    docs: List of Record objects
    type: list<Record>

  Record:
    docs: A single row of data in a Sheet
    properties:
      id: commons.RecordId
      workbookId: commons.WorkbookId
      sheetId: commons.SheetId
      values: RecordData

  RecordData:
    docs: A single row of data in a Sheet
    type: map<string, CellValue>

  CellValue:
    properties:
      valid: optional<boolean>
      messages: optional<list<ValidationMessage>>
      value: 
        docs: >- 
          The type is a string | integer | boolean. 
        type: unknown
  
  ValidationMessage:
    docs: Record data validation messages
    properties:
      type: optional<ValidationType>
      source: optional<ValidationSource>
      message: optional<string>

  ValidationType:
    enum:
      - error
      - warn
      - info

  ValidationSource:
    enum:
      - value: required-constraint
        name: required_constraint
      - value: unique-constraint
        name: unique_constraint
      - value: custom-logic
        name: custom_logic
      - unlinked
      - value: invalid-option
        name: invalid_option
  
  GetFieldsResponse:
    properties:
      data: optional<FieldResponse>

  FieldResponse:
    docs: A field with one or many records
    type: map<string, FieldsData>

  FieldsData:
    docs: Array of field data
    type: list<FieldData>

  FieldData:
    docs: A single field of data in a Sheet
    extends: CellValue
    properties:
      id: optional<commons.RecordId>
      counts: optional<RecordCounts>

  SortDirection: 
    enum: 
      - asc 
      - desc
  
  CreateSheetVersionResponse: 
    properties: 
      data: commons.VersionId