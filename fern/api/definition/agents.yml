# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  events: events.yml

service:
  auth: true
  base-path: /environments/{environmentId}
  path-parameters:
    environmentId: commons.EnvironmentId
  endpoints:
    list:
      path: /agents
      method: GET
      display-name: List agents
      response: ListAgentsResponse
      examples: 
        - name: Example0 
          path-parameters:
            environmentId: $commons.EnvironmentId.Example0
          response: 
            body: $ListAgentsResponse.Example0

    create:
      path: /agents
      method: POST
      display-name: Create an agent
      request: Agent
      response: AgentResponse
      errors: 
        - commons.BadRequestError
      examples: 
        - name: Agent Response 
          path-parameters:
            environmentId: $commons.EnvironmentId.Example0
          request: $Agent.Example0
          response: 
            body: $AgentResponse.Example0
        - name: Error Response
          path-parameters:
            environmentId: $commons.EnvironmentId.Example0
          request: $Agent.Example0 
          response:
            error: commons.BadRequestError
            body:
              - key: "123"
                message: "ID 123 not found"

    get:
      path: /agents/{agentId}
      method: GET
      display-name: Get an agent
      path-parameters:
        agentId: commons.AgentId
      response: AgentResponse
      errors: 
        - commons.BadRequestError
        - commons.NotFoundError
      examples: 
        - name: Example0 
          path-parameters:
            environmentId: $commons.EnvironmentId.Example0
            agentId: $commons.AgentId.Example0
          response: 
            body: $AgentResponse.Example0

    getAgentLogs:
      path: /agents/{agentId}/logs
      method: GET
      display-name: Get logs for an agent
      path-parameters:
        agentId: commons.AgentId
      response: GetAgentLogsResponse
      errors: 
        - commons.BadRequestError
        - commons.NotFoundError
      examples:
        - name: Example0 
          path-parameters:
            agentId: $commons.AgentId.Example0
            environmentId: $commons.EnvironmentId.Example0
          response: 
            body: $GetAgentLogsResponse.Example0

types:
  ListAgentsResponse:
    properties:
      data: list<Agent>
    examples:
      - name: Example0 
        value: 
          data: 
            - $Agent.Example0
  
  AgentResponse:
    properties:
      data: Agent
    examples:
      - name: Example0 
        value: 
          data: $Agent.Example0    

  Agent:
    docs: Properties used to create a new agent
    properties:
      topics:
        docs: The topics the agent should listen for
        type: optional<list<events.EventTopic>>
      compiler:
        docs: The compiler of the agent
        type: optional<Compiler>
      source:
        docs: The source of the agent
        type: optional<string>
    examples: 
      - name: Example0 
        value: 
          topics: 
            - $events.EventTopic.Example0
          compiler: $Compiler.Example0
          source: "module.exports = { routeEvent: async (...args) => { console.log(args) } }"
  
  Compiler:
    docs: The compiler of the agent
    enum:
      - js
    examples: 
      - name: Example0 
        value: js
  
  GetAgentLogsResponse:
    properties:
      pagination: optional<commons.Pagination>
      data: list<AgentLog>
    examples:
      - name: Example0 
        value: 
          pagination: $commons.Pagination.Example0
          data: 
            - $AgentLog.Example0

  AgentLog:
    docs: A log of an agent execution
    properties:
      eventId: commons.EventId
      success:
        docs: Whether the agent execution was successful
        type: boolean
      createdAt: string
      log:
        docs: The log of the agent execution
        type: optional<string>
    examples: 
      - name: Example0 
        value: 
          eventId: us_evt_9cuesESa7W9cuesE
          success: true
          createdAt: '2022-09-18T00:19:57.007Z'
          log: SUCCESS       